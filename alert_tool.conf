input {
file {
path => "/opt/toolsteam/automatafail/*"
start_position => "beginning"
ignore_older => 0
type => "af"
sincedb_path => "/dev/null"

}

file {
path => "/opt/toolsteam/automatareport/*"
start_position => "beginning"
ignore_older => 0
type => "ar"
sincedb_path => "/dev/null"

}

file {
path => "/opt/toolsteam/cmdb/*"
start_position => "beginning"
ignore_older => 0
type => "cmdb"
sincedb_path => "/dev/null"
}



file {
path => "/opt/toolsteam/connectfailed/*"
start_position => "beginning"
ignore_older => 0
type => "cf"
sincedb_path => "/dev/null"

}

file {
path => "/opt/toolsteam/escalatedalert/*"
start_position => "beginning"
ignore_older => 0
type => "ea"
sincedb_path => "/dev/null"

}

file {
path => "/opt/toolsteam/hostreport/*"
start_position => "beginning"
ignore_older => 0
type => "hr"
sincedb_path => "/dev/null"

}
file {
path => "/opt/toolsteam/rawdata/*"
start_position => "beginning"
ignore_older => 0
type => "rd"
sincedb_path => "/dev/null"

}

file {
path => "/opt/toolsteam/summary/*"
start_position => "beginning"
ignore_older => 0
type => "sum"
sincedb_path => "/dev/null"

}
}

filter {

if [type] == "af" {

  csv {
     separator => ","
    columns => ["Client Code","Automata Name","component_name","No of Failures","% Out of Automata Executions","Duration","Execution Link","Hostnames"]

  }


}


if [type] == "ar" {

  csv {
     separator => ","

    columns => ["Client","Automata Name","Total Alerts","Diagnosed","Remediated","Failed","Connectivity Failed","Failure Rate","Remediation Rate","Remediation Switched To Diagnosis","Switched %","CMDB Failed","CMDB Failed %"]


  }

}

if [type] == "cmdb" {

  csv {
     separator => ","
    columns => ["Client Code","Hostname","No of Times","CMDB Message","Duration"]
    
  } 

}

if [type] == "cf" {

  csv {
     separator => ","
    columns => ["Client","Hostname","Host IP","Connectivity Failure","Execution ID","Duration","Platform"]

  }

}


if [type] == "ea" {

  csv {
     separator => ","
    columns => ["Client Code","Alert Name","No of Alerts","% Out of Total Escalated","Duration","Sample Alert Description","Radar ID","Situation(s)","Hostnames"]

  }


}


if [type] == "hr" {

  csv {
     separator => ","
    columns => ["Client Code","Hostname","No of Alerts","Escalated","Success","Failure","Success Percent","Failure Percent"]
    
  } 

}

if [type] == "rd" {

  csv {
     separator => ","
    columns => ["IOT","ImT","Radar_id","Execution_id","create_date","finish_date","Execution_time_in_Sec","Actual_Automata_purpose","Execution_Purpose","closure_code","description","Hostname","Service","username","automaton","component_name","cmdb_details","fcode","failure_reason","return_code","stdout","stderr","command_description","status","queue_name","ipim_id","EBondTicket","Client","Client_name","affected_host","component_output","Situation"]
    
  } 

}

if [type] == "sum" {

  csv {
     separator => ","
    columns => ["IMT","Client","Total Alerts","Escalated Alerts","Diagnosed Successfully","Diagnosed when Remediation not Possible","Diagnosis Failed","Remediation with Validation Closure Successfully","Remediation with Corrective Closure Successfully","Remediation Failed","Connectivity Failed","IPCMDB (Server Not In Automata Scope or Not in IPCMDB)","Repeated Alerts","Blacklisted Alerts","AR%","AA%","AF%","AE%"]
    
  } 
  

}

}

output {


if [type] == "af" {

   elasticsearch {
     hosts => ["10.5.112.121:9200", "10.5.112.122:9200"]

     index => "automatafail"
  }
stdout {codec => rubydebug}
}

if [type] == "ar" {

   elasticsearch {
     hosts => ["10.5.112.121:9200", "10.5.112.122:9200"]

     index => "automatareport"
  }
stdout {codec => rubydebug}
}


if [type] == "cmdb" {

   elasticsearch {
     hosts => ["10.5.112.121:9200", "10.5.112.122:9200"]

     index => "cmdb"
  }
stdout {codec => rubydebug}
}

if [type] == "cf" {

   elasticsearch {
     hosts => ["10.5.112.121:9200", "10.5.112.122:9200"]
     index => "connectfailed"

  }  
stdout {codec => rubydebug}
}

if [type] == "ea" {

   elasticsearch {
     hosts => ["10.5.112.121:9200", "10.5.112.122:9200"]
     index => "escalatedalert"

  }
stdout {codec => rubydebug}
}


if [type] == "hr" {

   elasticsearch {
     hosts => ["10.5.112.121:9200", "10.5.112.122:9200"]

     index => "hostreport"
  }  
stdout {codec => rubydebug}
}
if [type] == "rd" {

   elasticsearch {
     hosts => ["10.5.112.121:9200", "10.5.112.122:9200"]

     index => "rawdata"
  }  
stdout {codec => rubydebug}
}
}

